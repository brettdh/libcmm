* Think about and write up a list of sensible ways to handle failures:
  * where all physical connections are broken, but interfaces
    are still available to connect on

      Physical connections are created on-demand, so there's no need to shut down
       the multi-socket yet.  This is essentially the same as the multi-socket's
       initial state after cmm_connect returns.

  * where all physical connections are broken and no connections are possible

     At this point, we have two choices.  We can mimic the failure semantics of
      a regular socket:
        - No failure is noticable until the application tries to use the socket.
          If at any point the library needs to make a connection and is not able
          to (because no networks are available), it throws up its hands and
          returns failure.
     ...or, we can apply the same semantics as for any other time a network is 
      unavailable:
        - (see scenario 3, below.)

     One subtlety here is that the library is sending additional data in the form
       of ACKs and interface updates, and if any of these fail entirely, it means
       that there are no connections possible at the moment.  When this happens,
       it may make sense to declare the connection unrecoverably broken.

     If each side continues listening for connections on the same port,
       however, it will be possible to resume communication later when a
       network becomes available.  If we apply the application-specified
       policy as described below, the application can decide to wait for
       an arbitrary period before closing the connection.

      Consider also the following scenario:
       1) Hosts A and B are communicating with a connected multi-socket.
       2) The last remaining network available to host A goes away.
          The next time host B tries to connect to that remote interface,
          the connect will fail, and host B will remove that interface
          from its list of available remote interfaces.
       3) Meanwhile, host A still has a list of host B's available interfaces.
          When its scout discovers an available network, it will attempt to
          connect to one of host B's interfaces.
       4) If the connect succeeds, then the multi-socket is re-established.
          If it fails, host A can try connecting to another of host B's
          available interfaces, removing the failed interface from its list.
       5) If host A is unable to connect to any of host B's interfaces,
          then it will wait, just as host B began doing at step 2.
       6) If each host has forgotten the other side's available interfaces
          due to failure, the multi-socket connection is now deadlocked, since
          neither side can connect.  However, if each side remembers the other
          side's previously available interfaces, it can retry each of them
          despite the previous failure.  As long as one interface at one of 
          hosts has a stable IP address, they should be able to re-establish
          the connection when they both regain connectivity.
       7) The above point on 'remembering' prior remote interfaces raises the
          question: when should a host assume a particular remote interface
          is permanently unavailable?  Presumably, upon reconnection, the
          remote side can give me an authoritative list of its available
          interfaces, but if I have tried and failed to connect on all previously
          available interfaces, it may be a good idea to have a separate timeout
          to keep the application from waiting indefinitely.

  * ALSO, think about this in terms of the following options for 
    failure notification:
    1) The application wants to ignore failure
    2) The application wants to be notified immediately
    3) The application wants to be notified after a timeout


1) Scenario: The app wants to send bytes with label X, and a suitable 
             network is available now.
     Result: The bytes are sent, and the call returns successfully.

2) Scenario: The app wants to send bytes with label X, but no suitable
             network is currently available.  The application provided
             a thunk with this call.
     Result: The thunk is registered and the call returns DEFERRED.
             The thunk will be called when a suitable network becomes
             available.

3) Scenario: 2), except that the application did not provide a thunk.
     Result: We could imagine one of the following:
             a) The operation returns failure immediately.
             b) The operation blocks indefinitely, until a suitable network
                becomes available.
             c) Same as b), but with an application-provided timeout.

   Presumably, different applications might wish to choose among these
   behaviors rather than being forced into any one of them.  How, then,
   should we allow the application to make this choice?

   First crack at this (not quite right):
     - b) is the default.
     - The application can get a) by using the O_NONBLOCK fcntl or by 
       using the MSG_DONTWAIT send flag.
     - The application can get c) by using blocking I/O and setting
       the SO_SNDTIMEO socket option.
   Positives of this approach:
     - It leverages interfaces that already exist.
   Why is it not quite right?
     - It hijacks the common meaning of "non-blocking I/O."  The application
       may want immediate failure notification AND blocking I/O for sends
       that can succeed now.
   However, it might still make sense to apply the SO_SNDTIMEO option for
     a blocking timeout, since this is defined as the "timeout until
     reporting an error" in socket(7).  (This turns out to be wrong as well,
     for the same reasons that usurping O_NONBLOCK is wrong.  See below.)

   Failing this, then, how should applications communicate the failure 
     semantics they desire?

   Second crack:
     - b) is the default.
     - The application can get c) by using blocking I/O and SO_SNDTIMEO.
     - The application can get a) by OR-ing a special label into the
       send_labels bits (perhaps CMM_LABEL_FAILFAST).
     - NOTE: if the application uses non-blocking I/O with the multisocket,
       only a) makes sense, so it will be the default (and only) behavior
       in this case.
   Positives of this approach:
     - It fits into the API we already have.
     - It leverages another API that already exists, without bending
       the semantics of that API.
     - It lets the application specify per-operation failure semantics;
       one can be block-until-success, the next can be fail-fast, etc.
   Negatives of this approach:
     - The FAILFAST label differs from the labels we have defined so far.
       Labels such as FG/BG and SMALL/LARGE describe their traffic;
       FAILFAST describes programming semantics -- but those semantics
       are coupled with multi-socket operations, so maybe it's alright
       to have this kind of "meta-label."

   Based on our 9/11/2009 meeting, this would be modified slightly:

     - b) remains the default.
     - The application can still get c) by using blocking I/O and SO_SNDTIMEO.
     - The application gets a) also by using blocking I/O and SO_SNDTIMEO, 
         by specifying a timeout of zero.  Thus, the FAILFAST label isn't
         needed.
     - Behavior for non-blocking sockets/operations remains the same as above.

   However, it looks like the SO_SNDTIMEO socket option is intended
   to allow applications to fall back to non-blocking I/O after blocking for
   the specified time.  Applications may still wish to set this on 
   multisockets while simultaneously specifying separate failure notification
   semantics.

   So...

   Instead, we'll just use these simple functions in the same way.

   int cmm_get_failure_timeout(mc_socket_t sock, u_long label, 
                               struct timeval *tp);
   int cmm_set_failure_timeout(mc_socket_t sock, u_long label,
                               const struct timeval *tp);

   The label argument is used to allow the application to specify different
   semantics for different labels.

   The default timeout is {tv_sec, tv_usec} == { -1, 0 }.  This will be 
   written into *tp if the getter is called without first calling the setter.
   Also, the application should use this to reset to the default failure
   semantics (blocking until a network is available).  Note that the send
   may still return failure if the connection is locally or remotely shutdown,
   regardless of the timeout.

   Timeouts can be applied per-send simply by calling the setter between 
   calls to our send functions.

   Note that operations can still fail after we have returned success to
   the application.  This is the same semantics as with the regular socket
   API, where a return code of success doesn't really mean that the operation
   will succeed, but that it won't definitely fail.  The end-to-end argument
   dissuades us from attempting to provide more thorough failure-checking,
   since the application-level check above our layer is still needed.
   It is important to note, however, that once we return success to the 
   application, we *cannot* at a later time register a thunk that it passed
   with that operation, because it will not be expecting the thunk to be
   called and will have freed the argument.
